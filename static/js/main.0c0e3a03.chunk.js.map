{"version":3,"sources":["Card.js","Timer.js","Flashcards.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","isFlipped","image","src","alt","width","height","value","Timer","useState","counter","setCounter","isActive","useEffect","interval","setInterval","console","log","setSeconds","clearInterval","Flashcards","initialArray","word","Array","prototype","push","apply","doublingArray","flatMap","i","map","o","id","length","j","Math","floor","random","temp","cards","setIsFlipped","firstCard","setFirstCard","secondCard","setSecondCard","showButton","setShowButton","setIsActive","seconds","handleFlip","card","setCardIsFlipped","setTimeout","resetCards","pop","includes","key","e","function","App","isShown","setIsShown","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0c0e3a03.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Card (props){\r\n    return(\r\n        <div className=\"card-container\" onClick={props.onClick}>\r\n            <div className={\"card \" + (props.isFlipped ? \"flipped\" : \" \") } > \r\n                <div className=\"side-front\">?</div>\r\n                <div className=\"side-back\">{props.image ? <img src={props.image} alt=\"img\" width=\"100px\" height=\"100px\" /> : props.value}</div>\r\n            </div>\r\n                {/* {cards.map(item =>\r\n                    <div className={\"card \" + (props.isFlipped ? \"back\" : \"front \") } key={cards.id} onClick={props.onClick}></div>\r\n                    )}\r\n                    \r\n                <br/>\r\n            \r\n                {cards.map(item =>\r\n                    <div className=\"card\"></div>\r\n                    )} */}\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default Card;","import { useState,useEffect}  from 'react';\r\n\r\nexport default function Timer(props) {\r\n  const [counter, setCounter] = useState(0);\r\n  const isActive=props.isActive;\r\n\r\n  \r\n  useEffect(() => {\r\n    let interval = null;\r\n    if(isActive){\r\n     interval = setInterval(() => {\r\n      setCounter(counter => counter + 1);\r\n    }, 1000);\r\n  \r\n    console.log(\"isActive\");\r\n  }\r\n    else if (!isActive) {\r\n      \r\n    props.setSeconds(counter);\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  },[counter]);\r\n\r\n  return counter;\r\n};\r\n\r\n","import React, { useState,useEffect}  from 'react';\r\nimport Card from './Card';\r\nimport Timer from './Timer';\r\n\r\nfunction Flashcards(props) {\r\n        const initialArray = [{value:\"1\", word:\"pen\"}, {value:\"2\", word:\"cup\"}, {value:\"3\", word:\"desk\"},\r\n        {value:\"4\", word:\"printer\"},{value:\"5\", word:\"pencil\"}];\r\n        const plWords = [{value:\"1\",word:\"pen\", image:\"https://cdn.shoplo.com/6456/products/th640/akae/35762-c8153ff71acade138e4ae5d242b35f775d9516362b1265-36847198.jpg\"},\r\n         {value:\"2\", word:\"kubek\",image:\"https://www.ikea.com/pl/pl/images/products/dinera-mug-grey-blue__0642544_PE701242_S5.JPG?f=s\"}, \r\n         {value:\"3\", word:\"biurko\",image:\"https://d.allegroimg.com/s512/039e45/96c2991941c29da10c1246fd7a1d/BIURKO-NAROZNE-KOMPUTEROWE-B20-LEWE-155cm-BIALE\"},\r\n        {value:\"4\", word:\"drukarka\",image:\"https://www.mall.cz/i/42584913/450/450\"},\r\n        {value:\"5\",word:\"ołówek\", image:\"https://strefaucznia.pl/38598-thickbox_default/gruby-olowek-trojkatny-zenith-simple.jpg\"}];\r\n        Array.prototype.push.apply(initialArray,plWords)\r\n\r\n        const doublingArray = initialArray.flatMap(i => [i]).map((o , i) => ({\r\n          id: i+1,\r\n          value:o.value,\r\n          word:o.word,\r\n          image:o.image\r\n        }));\r\n\r\n          for (var i = doublingArray.length - 1; i > 0; i--) {\r\n              var j = Math.floor(Math.random() * (i + 1));\r\n              var temp = doublingArray[i];\r\n              doublingArray[i] = doublingArray[j];\r\n              doublingArray[j] = temp;\r\n          }\r\n        const [cards, setCards ] = useState(doublingArray);\r\n        const [isFlipped, setIsFlipped] = useState(doublingArray);\r\n        const [firstCard,setFirstCard] = useState(null);\r\n        const [secondCard,setSecondCard] = useState(null);\r\n        const [showButton,setShowButton]  = useState(true);\r\n        const [isActive, setIsActive] = useState(true);\r\n        const [seconds, setSeconds] = useState(0);\r\n      const  setCardIsFlipped = (card) => {\r\n           setIsFlipped([...isFlipped,card]);\r\n        }\r\n\r\n        useEffect(() => {\r\n          setTimeout(() => {\r\n            setIsFlipped([],null);\r\n         }, 4000);\r\n          console.log(\"cards\");\r\n        },[cards]);\r\n\r\n       \r\n\r\n\r\n     function handleFlip (card) {\r\n      \r\n      if (((firstCard && (card.id === firstCard.id)) || (secondCard && (card.id === secondCard.id))))\r\n         return;\r\n      if((firstCard) && (secondCard))\r\n        return;\r\n\r\n       setCardIsFlipped(card);\r\n       \r\n      (firstCard) ? setSecondCard(card) : setFirstCard(card);\r\n      if(initialArray.length=== isFlipped.length+1){\r\n      //props.function(false);\r\n        setIsActive(false);\r\n        setTimeout(() => {\r\n          setShowButton(false);\r\n       }, 1000);\r\n        console.log(isActive);}\r\n      }\r\n      \r\n     \r\n\r\n      useEffect(() => {\r\n        \r\n        console.log(\"ifFirst Card itp\");\r\n        if (!firstCard || !secondCard)\r\n          return;\r\n        (firstCard.value === secondCard.value) ? onSuccessGuess() : onFailureGuess();\r\n      });\r\n    \r\n      function onSuccessGuess(){\r\n          console.log(\"Sukces!\");\r\n          resetCards();\r\n      }\r\n\r\n      function onFailureGuess(){\r\n         setTimeout(() => {\r\n          resetCards();\r\n       }, 1000);\r\n        isFlipped.pop();\r\n        isFlipped.pop();\r\n      }\r\n      function resetCards(){\r\n          setFirstCard(null);\r\n          setSecondCard(null);\r\n      }\r\n      function show(){\r\n        return <div>\r\n         <h1>Gratulacje! </h1>\r\n         Twój czas to : {seconds}s <br/>\r\n         Klinij, aby wrócic do strony głównej<br/>\r\n        <button className=\"button\" onClick={e => props.function(false)}> Strona Główna </button>\r\n        </div>\r\n      }\r\n      \r\n        return(\r\n          <div>\r\n          { showButton ? \r\n          <div> \r\n            <h3>Twój czas: <Timer setSeconds={setSeconds} isActive={isActive}/> s </h3>\r\n            <div className=\"cards-container\">\r\n            {cards.map(card => <Card onClick={() => handleFlip(card)} \r\n            value={card.word} image={card.image} isFlipped={isFlipped.includes(card)} key={card.id} />) } \r\n    <br/> \r\n\r\n      \r\n         </div></div> : show()}\r\n         \r\n         </div>\r\n\r\n        )\r\n\r\n      }\r\n\r\n\r\nexport default Flashcards;","import React, { useState } from 'react';\nimport Flashcards from './Flashcards';\nimport './App.css';\n\nfunction App() {\n  const [isShown,setIsShown] = useState(false);\n  return (\n    <div className=\"container\">\n      <img src=\"/title4.png\" alt=\"Title\" className=\"titleImg\" />\n      { !isShown ?\n      <button className=\"button\" onClick={e => setIsShown(true)}> START ! </button> :\n      <Flashcards function={setIsShown}/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}